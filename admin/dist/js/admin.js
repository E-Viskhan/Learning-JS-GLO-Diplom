(()=>{"use strict";const e=async e=>{try{const t=await fetch(e);if(!t.ok)throw new Error("Произошла ошибка, данных нет!");return await t.json()}catch(e){console.error(e.message)}},t=async({url:e,data:t,method:n="POST"})=>{try{if(!(await fetch(e,{method:n,headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})).ok)throw new Error("Произошла ошибка, данных нет!")}catch(e){console.error(e.message)}},n="http://localhost:3000/services/",s=e=>{const t=document.getElementById("tbody");t.innerHTML="",e.forEach((e=>{const n=(({type:e,name:t,units:n,cost:s,id:a})=>`<tr class="table__row">\n    <td class="table__id table__cell">${a}</td>\n    <td class="table-type table__cell">${e}</td>\n    <td class="table-name table__cell">${t}</td>\n    <td class="table-units table__cell">${n}</td>\n    <td class="table-cost table__cell">${s} руб</td>\n    <td>\n      <div class="table__actions table__cell">\n        <button class="button action-change">\n          <span class="svg_ui">\n            <svg class="action-icon_change">\n              <use xlink:href="./img/sprite.svg#change"></use>\n            </svg>\n          </span>\n          <span>Изменить</span>\n        </button>\n        <button class="button action-remove">\n          <span class="svg_ui">\n            <svg class="action-icon_remove">\n              <use xlink:href="./img/sprite.svg#remove"></use>\n            </svg>\n          </span>\n          <span>Удалить</span>\n        </button>\n      </div>\n    </td>\n  </tr>`)(e);t.insertAdjacentHTML("beforeend",n)}))};"true"!==(e=>{let t=document.cookie.match(new RegExp("(?:^|; )"+"access".replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,"\\$1")+"=([^;]*)"));return t?decodeURIComponent(t[1]):void 0})()&&(document.location.href="index.html"),window.apiService=new class{async getServices(){return e(n)}async getService(t){return e(n+t)}async addService(e){return t({url:n,data:e})}async removeService(e){return t({url:n+e,method:"DELETE"})}async changeService(e,s){return t({url:n+e,data:s,method:"PATCH"})}async replaceService(e,s){return t({url:n+e,data:s,method:"PUT"})}async filterServices(t){return e(`${n}?type=${t}`)}async filterUsers(t){return e(`http://localhost:4545/users?${t}=true`)}async getSortUsers({sortOptionName:t,order:n}){return e(`http://localhost:4545/users?_sort=${t}&_order=${n}`)}async getSearchUsers(t){return e(`http://localhost:4545/users?name_like=${t}`)}},apiService.getServices().then((e=>{s(e)})),(async()=>{const e=document.getElementById("typeItem");(await(async()=>fetch("http://localhost:3000/services/").then((e=>e.json())).then((e=>{const t=new Set;return e.forEach((e=>t.add(e.type))),t})))()).forEach((t=>{const n=`<option value="${s=t}">${s}</option>`;var s;e.insertAdjacentHTML("beforeend",n)}))})(),(()=>{const e=document.getElementById("typeItem");e.addEventListener("change",(async t=>{let n,a=e.value;n="Все услуги"===a?await apiService.getServices():await apiService.filterServices(a),s(n)}))})()})();